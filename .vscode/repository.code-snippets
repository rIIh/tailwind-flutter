{
	"AFI.abstractRepo": {
		"scope": "dart, flutter",
		"prefix": "repoAbstract",
		"body": [
			"import 'package:introvert/common/client/model/afi_result.dart';",
			"import 'package:introvert/common/client/model/parameters_from_client/pagination_params.dart';",
			"import 'package:introvert/features/base/failure/failure.dart';",
			"",
			"abstract interface class ${1:ServiceName}Repository {",
			"  Future<AFIResult<_, Failure>> fetch({",
			"   required String id,",
			"    PaginationFromClient? pagination,",
			"  });",
			"}",
		],
		"description": "Snippets abstract repository from project AFI"
	},
	"AFI.repoRemote": {
		"scope": "dart, flutter",
		"prefix": "repoRemote",
		"body": [
			"import 'package:introvert/common/client/api_client_v2.dart';",
			"import 'package:introvert/common/client/model/afi_result.dart';",
			"import 'package:introvert/common/client/model/parameters_from_client/pagination_params.dart';",
			"import 'package:introvert/features/base/failure/failure.dart';",
			"",
			"final class Remote${1:ServiceName}Repository implements ${1:ServiceName}Repository {",
			"  final ApiClientV2 _client;",
			"  final ${1:ServiceName}DataConverter _converter;",
			"",
			"  Remote${1:ServiceName}Repository({required ApiClientV2 client, required ${1:ServiceName}DataConverter converter,})",
			"  : _client = client,",
			"_converter = converter;",
			"",
			"  @override",
			"  Future<AFIResult<_, Failure>> fetch({",
			"    PaginationFromClient? pagination,",
			"  }) async {",
			"    final result = await _client.get(",
			"      version: ApiVersion.v3,",
			"      path: '/_',",
			"      enableLocale: false,",
			"      params: pagination?.toRequestMap(),",
			"      responseParser: (json) {",
			"        return ${1:ServiceName}ResponseDto.fromJson(json);",
			"      });",
			"",
			"  return AFIResult.fromResult(result.mapResult(_converter.convert).mapFailure(Failure.map));",
			"  }",
			"}",
		],
		"description": "Snippets remote repository from project AFI",
	},
	"AFI.repoFake": {
		"scope": "dart, flutter",
		"prefix": "repoFake",
		"body": [
			"import 'package:introvert/common/client/api_client_v2.dart';",
			"import 'package:introvert/common/client/model/afi_result.dart';",
			"import 'package:introvert/common/client/model/parameters_from_client/pagination_params.dart';",
			"import 'package:introvert/features/base/failure/failure.dart';",
			"",
			"final class Fake${1:ServiceName}Repository implements ${1:ServiceName}Repository {",
			"  final ApiClientV2 _client;",
			"  final ${1:ServiceName}DataConverter _converter;",
			"",
			"  Fake${1:ServiceName}Repository({required ApiClientV2 client, required ${1:ServiceName}DataConverter converter,})",
			"  : _client = client,",
			"_converter = converter;",
			"",
			"  @override",
			"  Future<AFIResult<_, Failure>> fetch({",
			"    PaginationFromClient? pagination,",
			"  }) async {",
			"  return AFIResult.ok(_);",
			"  }",
			"}",
		],
		"description": "Snippets remote repository from project AFI"
	},
	"dependency": {
		"scope": "dart",
		"prefix": "dep",
		"body": [
			"_$1 = $1 ?? getIt()$0"
		]
	}
}